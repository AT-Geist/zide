#!/usr/bin/env bash

read -r -d '' HELP_TEXT << EOF
Usage: $(basename "$0") [OPTIONS] <working_dir> <layout>

Optional Parameters:
  <working_dir>        Working directory to open in, defaults to `pwd`
  <layout>             Layout to use from this project's \`layouts/\` directory

Options:
  -h, --help           Show this help message and exit.
  -p, --picker         File picker to use. Available file pickers are listed in
                       bin/lib. Equivalent to setting ZIDE_FILE_PICKER env var.
  -t, --tab-name       Optional name to give the newly opened tab when launching
                       from an existing session.
  -T                   Name the newly opened tab after the directory opened when
                       launching from an existing session.

Environment Variables:
  ZIDE_DEFAULT_LAYOUT  Default zide layout to use from the \`layouts/\` directory.

Description:
  Start using Zellij in an IDE layout. The command will do one of two things:
    1. If you're not currently in a Zellij session, it'll start one
    2. If you're in an existing Zellij session, it'll create a new tab

  By default, starting zide will use the compact layout, consisting of a
  vertical split of panes with Yazi on the left occupying a small slice of it,
  and \`$EDITOR\` on the right occupying the rest, with your current
  working directory set as the directory in both \`$EDITOR\` and Yazi.

  Passing in a working directory will ensure that Yazi, your editor, and any
  future panes are all working in the same directory. By default, it'll use the
  current working directory from which you're calling the command.

  The non-compact layout is similar to the compact one, but with a 3rd,
  100-column wide pane to the right. The two layouts also differ slightly in how
  the swap layouts work. Any additional layouts you add or configure in the zide
  \`layouts/\` directory will be available to use from the zide command.
EOF

# Function to display the help text
show_help() {
  echo "$HELP_TEXT"
}

# Parse command-line options
tabName=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -p|--picker)
      if [[ -n "$2" && "$2" != -* ]]; then
        picker="$2"
        shift 2
      else
        echo "Error: --picker requires a non-empty value."
        exit 1
      fi
      ;;
    -t|--tab-name)
      if [[ -n "$2" && "$2" != -* ]]; then
        tabName="$2"
        shift 2
      else
        echo "Error: --tab-name requires a non-empty value."
        exit 1
      fi
      ;;
    -T)
      if [[ -z "${tabName}" ]]; then
        tabName="__basename__"
      fi
      shift
      ;;
    -*)
      echo "Unknown option: $1"
      echo "Use --help or -h for usage information."
      exit 1
      ;;
    *)
      # Stop processing options when a positional parameter is encountered
      break
      ;;
  esac
done

# Optional params
# 
# Working directory to open in, defaults to pwd
cwd=${1:-$(pwd)} 
# Available layouts can be found in the zide layouts/ directory
layout=${2:-${ZIDE_DEFAULT_LAYOUT:-"compact"}} 
# Default tab name to the basename of the provided dir if -T flag set
if [[ "${tabName}" == "__basename__" ]]; then
  tabName="$(basename ${cwd})"
fi

# Figure out where zide is installed based on where the script lives
if command -v readlink >/dev/null 2>&1; then
  script_dir=$(dirname "$(readlink -f "$0")")
else
  script_dir=$(cd -- "$(dirname -- "$0")" && pwd)
fi

# Export location of the zide project files for further use
export ZIDE_DIR=$(dirname "$script_dir")
export ZIDE_FILE_PICKER=${picker:-${ZIDE_FILE_PICKER}}
export ZIDE_CURRENT_LAYOUT="${layout}"
export ZIDE_ORIGINAL_EDITOR="${EDITOR}"

# Dump env vars to disk so they can be restored across tabs and panes
tmpDir="${ZIDE_DIR}/tmp"
mkdir -p "${tmpDir}"
printenv | grep ZIDE_ | sed 's/^/export /; s/=/="/; s/$/"/' > "${tmpDir}/env"

layout_path="$ZIDE_DIR/layouts/$layout"
if [ -n "$ZELLIJ" ]; then
  zellij action new-tab --cwd $cwd --layout "$layout_path"
  if [[ -n "${tabName}" ]]; then
    zellij action rename-tab "${tabName}"
  fi
else
  # No way to specify the working dir to the zellij CLI, so we change the working dir before opening
  # zellij, and change it back once we exit
  pushd $cwd > /dev/null
    zellij --layout "$layout_path"
  popd > /dev/null
fi

