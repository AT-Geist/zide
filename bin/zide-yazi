#!/usr/bin/env bash

read -r -d '' HELP_TEXT << EOF
Usage: $(basename "$0") [OPTIONS] <command>

Optional Parameters:
  <command>         Command used to open files in \$EDITOR
	<config>          Yazi picker config location  
	<working_dir>     Optionally specify a working directory to open yazi intoOptions:

Options:
  -h, --help        Show this help message and exit.

Description:
  Wrapper around yazi that handles sending picked files to the \$EDITOR pane and
  then re-opening yazi. If a directory was the picked path, yazi will re-open in
  that directory as its new working dir.
EOF

# Function to display the help text
show_help() {
  echo "$HELP_TEXT"
}

# Parse command-line options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -*)
      echo "Unknown option: $1"
      echo "Use --help or -h for usage information."
      exit 1
      ;;
    *)
      # Stop processing options when a positional parameter is encountered
      break
      ;;
  esac
done

# Optional params
#
# Command to perform on the paths, available commands will be based on your editor
command=${1}
# Yazi picker config location
config=${2:-"${ZIDE_DIR}/yazi"}
# Optionally specify a working directory to open yazi into
working_dir=${3} 

# Point yazi to the config directory for opening as a single layout pane
export YAZI_CONFIG_HOME="${config}"

# Use yazi to pick our files
paths=$(yazi ${working_dir} --chooser-file=/dev/stdout | while read -r; do printf "%q " "$REPLY"; done)

# Open the paths in the $EDITOR
printf "%s" "${paths}" | zide-edit ${command}

# Grab the directory of the first provided path so we can reopen yazi in it
path=${paths[0]}
dir=${path}
if [[ -f "${path}" ]]; then
	dir=$(dirname "${path}")
fi

# Yazi exits once we pick paths, so re-open it manually by re-running this very script, and set
# the working dir to be the dir of the first path
"$0" ${command} ${config} ${dir}
